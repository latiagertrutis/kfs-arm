#+LATEX_HEADER: \usepackage[margin=1.1in]{geometry}
#+LATEX_HEADER: \usepackage[x11names]{xcolor}
#+LATEX_HEADER: \usepackage[inline]{enumitem}
#+LATEX_HEADER: \usepackage{parskip}

#+LATEX_HEADER: \setlist[itemize]{parsep=0pt}

#+LATEX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue1, citecolor = PaleGreen1, linkcolor = black}

#+OPTIONS: H:4 num:nil

#+LATEX:\newpage

* Embedded 101
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Embedded 101}
Boot and say hello.

mrodrigu ([[mailto:mrodrigu@student.42.fr][mrodrigu@student.42.fr]])

Editor: anddokhn ([[mailto:anddokhn@student.42madrid.com][anddokhn@student.42madrid.com]])

Thanks for moral support: danrodri ([[mailto:danrodri@student.42madrid.com][danrodri@student.42madrid.com]])

#+LATEX:\newpage

* Chapter I
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter1}
** Introduction to basics
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Introduction to basics}

Be welcome to *Embedded 101*.

In this project we will introduce you to the basics of embedded programming. Here, in the world of the tiny, you will go back to the basics, and code like those mid 80s hackers.

Okay, no kidding, you will need to manage with as little as a couple hundred MB of RAM and no more than a MB of flash. So you will learn to be surgical in your programming and be very aware of the available resources. No more infinite virtual memory, hurray!

But, lets ask the question: Why is embedded still a thing today, in a world where gigs of RAM are worth a couple dimes? Well, for us, the users, a couple dimes ain't a big deal, but the industry works at a different scale. When you are the boss of a large company that needs to build a product at million-scale, from dishwasher controllers to car on-board computers. Believe me, you will fight for the price of the last damn screw. So optimizing the resources is critical here. If you can squeeze the same logic in half of the resources, then you are thinking the right way.

Now some specifics that you will see in this set of projects. You will learn new concepts embedded (ha ha) in this amazing world: MCUs (we also have CPUs, although they are more rare); GPIOs; CAN buses; serial communications protocols (UART, SPI, and so on); boot loaders (the embedded ones are a bit different. Many devices need OTA updates); JTAGs, and much more.

Here we will work in what is called *bare-metal code*, that is, working without an underlying OS. So you will need to directly access the resources of your MCU from registers (no worries, there is plenty of documentation and HAL libraries provided by the manufacturer). This is the simplest way of starting, and it is the way that the industry has been working for years. As a note, the industry is moving towards using operating systems on embedded devices, since with the abstraction (oh mighty POSIX!), it is much easier to scale, test, and develop with. But lets go step by step and start from the very basics.

Good luck and have fun!

#+ATTR_LATEX: :width 12cm
[[file:101.jpg]]

#+LATEX:\newpage

* Chapter II
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter II}
** Objectives
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Objectives}

Upon completion of this subject you'll have:

- A program that will say "Hello 42!" using a UART interface
- A HAL (Hardware Abstraction Layer) for controlling UART peripherals
- A tiny bootloader to initialize the device and run your program
- A linker script (ld) that will link your code for your specific device
- All of the above combined in an elf file that you will flash to your device

#+LATEX:\newpage

* Chapter III
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter III}
** General instructions
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}General instructions}
** Real vs Emulated
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Real vs Emulated}

It is not mandatory to use any specific devices, although it must be using *ARM architecture*. You can also run your code in qemu by using ~qemu-system-arm~. If you want to do the project with a real device, ask the staff, they might have some devices prepared for you. If not, you can always buy an evaluation board, they usually are inexpensive. If I may suggest, look for stm32 boards, there are many kinds, and ST has loads of documentation and other resources available. There are some alternatives from Adafruit or Raspberry. Search on the internet, there are many options!

** Language and Environment
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Language and Environment}

Only the C and ASM languages are allowed in this project.

In the embedded world there are many, how could I call it... "shortcuts", that auto-generate code for your specific device through evil graphical interfaces, making the user disregard completely what is happening in the background. But we are not here to be that kind of developer. Am I right? We are here for being the fighters in the trenches, building things from scratch. So, it is *forbidden* to use those types of tools. You must *understand* all parts of your code, and seek the *bare minimum setup* that gets your code working.

** Architecture
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Architecture}

ARM architecture is *mandatory*, specifically we are going to use the Thumb instruction set of ARM. This mandatory since we want to be efficient and minimal.

** Compilation
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Compilation}


You can use any compiler. Although it is common to use ~arm-none-eabi-gcc~.

The following flags *must* be present to build and link your binary:

- ~-mcpu=xxx~
- ~-mthumb~

Make sure to substitute ~xxx~ by the MCU type you are using, for example, ~-mcpu=cortex-m4~.

** Linking
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Linking}

Each MCU requires its own linker script, so you must write your own, based on the MCU documentation. It is *forbidden* to use a generated linker script. You must try to write a linker script to be as simple as possible.

** Building
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Building}

A *Makefile* must be present in order to compile and link the project.

** Documentation
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Documentation}

There is a lot of documentation available online. Make sure to look at the manufacturer's web site for your specific MCU, they not only offer data sheets and user manuals, but a lot of other resources, like libraries from which you can get nice ideas for your code (most of the time). As for my part, let me share some useful resources I use:

- [[https://wiki.osdev.org/ARM_Overview][OSDev]]
- [[https://microcontrollerslab.com/][Microcontrolerslab]]
- For any POSIX related consultations, I just go to the source: [[https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/][Open Group]]

#+latex: \newpage
** Project organization
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Project organization}


In an embedded project (especially a bare-metal one) it is very easy to get spaghetti. One project can support many boards with different HALs, startup files, and so on. So here is a project structure I suggest to keep things compartmentalized:

#+begin_src
|-- board <- Board specific code
|   `-- <your-board-model>
|       `-- startup.c
|-- driver
|   `-- hal
|       `-- <your-board-model>  <- HALs for every model supported
|           `-- usart
|               `-- usart.c
|-- include
|   |-- some_include.h          <- Board independent includes
|   `-- <your-board-model>      <- Board dependent includes
|       |-- hal
|       |   `-- <your-board-model>_usart_hal.h
|       `-- <your-board-model>.h
|-- Makefile
|-- scripts
|   `-- <your-board-model>.ld
`-- src
    `-- main.c                  <- Split in dirs if more than one app
#+end_src

Substitute ~<your-board-model>~ by the board of your choice.

This structure can be easily extended. Notice that ~driver~ only contains ~hal~ drivers, this is because we are not using an underlying OS. Maybe in the future we will be using an OS, and we could add ~driver/posix~. Also look at the comment about the ~src~ directory. For now, we will end with one application only, but, in the future, we might end up with many, so we would be able to choose a combination of ~app + board + os~.

#+LATEX:\newpage

* Chapter IV
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter IV}
** Mandatory part
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Mandatory part}
** Base
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Base}

You must write code that executes on the MCU of your choosing, and is capable of *reading* and *writing* from/to the serial line (UART).

For emulated devices:

- Install ~qemu-system-arm~ in your system
- Configure the emulator to expose the UART serial line to the host as a character device
- Start a gdb server at port ~:3333~ and halt the MCU, so you can start it manually and step-trough the code as needed

For real devices:

- Depending on the board of your choice there might be multiple ways of flashing the code. I recommend finding one that has a JTAG port and a debugger integrated (or at least a JTAG port and an external debugger). This is a common way to debug embedded devices in the industry, from which you can flash and inspect your code as if it were a binary on your local machine. If you are taking this route, I recommend you pay a visit to the [[https://openocd.org/][OpenOCD]] project's web site
- Get a serial-to-tty cable (or build one yourself, if you are feeling funky), and connect it to the ~Rx~, ~Tx~ and ~GND~ pins of the UART you configured

Common points:

- Write some startup code that will initialize your MCU and boot into your main program
- Write a HAL driver to control the UART
- Write a main program that will print "Hello 42!", and then will echo back any printable characters you type (check tools like ~minicom~ or ~picocom~). You must end every line with CRLF.
- Write a minimal linker script that links your object files into an elf file that must not exceed 20KB

#+latex: \newpage
** Makefile
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Makefile}

Your Makefile must compile all sources with the right flags and the right compiler. Notice that you may end with at least two different types of files: ~.c~, and ~.ld~ (if you write some assembler also ~.asm~), so make your rules, so all dependencies are managed correctly. For instance, if your linker script changes, your sources do not need to be recompiled into objects, but the program will need to be relinked. It goes without saying, you must properly manage all the dependencies of your sources, even the dependencies in your headers.

#+LATEX:\newpage

* Chapter V
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter V}
** Bonus part
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Bonus part}

Here are some ideas of interesting bonuses you can make:

- Add a HAL for the leds (if your board has) and use it, for example, to visualize hardfaults and the reset status
- Add some fancy text functions: formatted print with buffered characters; a cowsay?
- Make good use of any of your peripherals. For example, use a pwm signal to control the fan's speed depending on the temperature of your MCU
- A hexdump tool
- A ~GNU strings~ like tool that will analyze the address space of your MCU (only ascii characters)
- A small shell that can run very basic commands with no arguments (hexdump, echo, cowsay, etc.)

#+LATEX:\newpage
  
* Chapter VI
#+LATEX:\addcontentsline{toc}{section}{\protect\numberline{}Chapter VI}
** Turn-in and peer-evaluation
#+LATEX:\addcontentsline{toc}{subsection}{\protect\numberline{}Turn-in and peer-evaluation}

This project will be evaluated by humans only. Push your work to a Git repository, as usual. Only the work present in your repository will be evaluated.
